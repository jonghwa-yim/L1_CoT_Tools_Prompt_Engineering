# CoT vs Tool Ìå®ÌÑ¥ Ïã§Ïäµ ÌîÑÎ°úÏ†ùÌä∏

import os
import re
import json
import time
import mysql.connector
from mysql.connector import Error
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
import openai
from dotenv import load_dotenv
from tabulate import tabulate
from rich.console import Console
from rich.panel import Panel
from rich.syntax import Syntax
from rich.table import Table
from rich.prompt import Prompt, Confirm

# .env ÌååÏùº Î°úÎìú
load_dotenv()

# Rich ÏΩòÏÜî ÏÑ§Ï†ï
console = Console()

@dataclass
class QueryResult:
    """ÏøºÎ¶¨ Ïã§Ìñâ Í≤∞Í≥ºÎ•º Îã¥Îäî Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§"""
    success: bool
    sql_query: str
    execution_time: float
    result_data: List[Dict] = None
    error_message: str = None
    reasoning_steps: List[str] = None

class DatabaseManager:
    """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Î∞è Í¥ÄÎ¶¨ ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, host='localhost', port=3306, database='ecommerce_demo', 
                 user='root', password=''):
        self.connection_config = {
            'host': host,
            'port': port,
            'database': database,
            'user': user,
            'password': password,
            'autocommit': True,
            'consume_results': True,
            'connection_timeout': 10,
            'sql_mode': 'TRADITIONAL'
        }
        self.connection = None
    
    def connect(self):
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞"""
        try:
            self.connection = mysql.connector.connect(**self.connection_config)
            if self.connection.is_connected():
                console.print("‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÑ±Í≥µ!", style="green")
                return True
        except Error as e:
            console.print(f"‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ïã§Ìå®: {e}", style="red")
            return False
    
    def disconnect(self):
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ï¢ÖÎ£å"""
        if self.connection and self.connection.is_connected():
            self.connection.close()
            console.print("üîå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ï¢ÖÎ£å", style="yellow")
    
    def execute_query(self, query: str) -> QueryResult:
        """ÏøºÎ¶¨ Ïã§Ìñâ Î∞è Í≤∞Í≥º Î∞òÌôò"""
        start_time = time.time()
        cursor = None
        
        try:
            cursor = self.connection.cursor(dictionary=True)
            cursor.execute(query)
            
            if query.strip().upper().startswith('SELECT') or query.strip().upper().startswith('SHOW') or query.strip().upper().startswith('DESCRIBE'):
                result_data = cursor.fetchall()
                execution_time = time.time() - start_time
                return QueryResult(
                    success=True,
                    sql_query=query,
                    execution_time=execution_time,
                    result_data=result_data
                )
            else:
                self.connection.commit()
                execution_time = time.time() - start_time
                return QueryResult(
                    success=True,
                    sql_query=query,
                    execution_time=execution_time,
                    result_data=[]
                )
        
        except Error as e:
            execution_time = time.time() - start_time
            return QueryResult(
                success=False,
                sql_query=query,
                execution_time=execution_time,
                error_message=str(e)
            )
        finally:
            if cursor:
                try:
                    cursor.close()
                except:
                    pass  # cursorÍ∞Ä Ïù¥ÎØ∏ Îã´ÌòîÍ±∞ÎÇò ÏóêÎü¨Í∞Ä ÏûàÏñ¥ÎèÑ Î¨¥Ïãú
    
    def setup_database(self):
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î∞è ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
        setup_queries = [
            # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉùÏÑ±
            "CREATE DATABASE IF NOT EXISTS ecommerce_demo",
            "USE ecommerce_demo",
            
            # ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú (Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨)
            "DROP TABLE IF EXISTS order_items",
            "DROP TABLE IF EXISTS orders", 
            "DROP TABLE IF EXISTS products",
            "DROP TABLE IF EXISTS customers",
            
            # Í≥†Í∞ù ÌÖåÏù¥Î∏î
            """CREATE TABLE customers (
                customer_id INT PRIMARY KEY AUTO_INCREMENT,
                name VARCHAR(100) NOT NULL,
                email VARCHAR(150) UNIQUE NOT NULL,
                country VARCHAR(50) NOT NULL,
                signup_date DATE NOT NULL,
                INDEX idx_country (country),
                INDEX idx_signup_date (signup_date)
            )""",
            
            # ÏÉÅÌíà ÌÖåÏù¥Î∏î
            """CREATE TABLE products (
                product_id INT PRIMARY KEY AUTO_INCREMENT,
                name VARCHAR(200) NOT NULL,
                category VARCHAR(50) NOT NULL,
                price DECIMAL(10,2) NOT NULL,
                stock_quantity INT NOT NULL DEFAULT 0,
                INDEX idx_category (category),
                INDEX idx_price (price)
            )""",
            
            # Ï£ºÎ¨∏ ÌÖåÏù¥Î∏î
            """CREATE TABLE orders (
                order_id INT PRIMARY KEY AUTO_INCREMENT,
                customer_id INT NOT NULL,
                order_date DATETIME NOT NULL,
                total_amount DECIMAL(12,2) NOT NULL,
                status ENUM('pending', 'completed', 'cancelled', 'refunded') NOT NULL DEFAULT 'pending',
                FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
                INDEX idx_customer_id (customer_id),
                INDEX idx_order_date (order_date),
                INDEX idx_status (status)
            )""",
            
            # Ï£ºÎ¨∏ ÏÉÅÏÑ∏ ÌÖåÏù¥Î∏î
            """CREATE TABLE order_items (
                order_item_id INT PRIMARY KEY AUTO_INCREMENT,
                order_id INT NOT NULL,
                product_id INT NOT NULL,
                quantity INT NOT NULL,
                unit_price DECIMAL(10,2) NOT NULL,
                FOREIGN KEY (order_id) REFERENCES orders(order_id),
                FOREIGN KEY (product_id) REFERENCES products(product_id),
                INDEX idx_order_id (order_id),
                INDEX idx_product_id (product_id)
            )"""
        ]
        
        # ÏÉòÌîå Îç∞Ïù¥ÌÑ∞
        sample_data_queries = [
            # Í≥†Í∞ù Îç∞Ïù¥ÌÑ∞
            """INSERT INTO customers (name, email, country, signup_date) VALUES
            ('ÍπÄÎØºÏàò', 'minsu.kim@email.com', 'Korea', '2024-08-15'),
            ('Ïù¥ÏßÄÏòÅ', 'jiyoung.lee@email.com', 'Korea', '2024-09-20'),
            ('Î∞ïÏ≤†Ïàò', 'cheolsu.park@email.com', 'Korea', '2024-10-10'),
            ('Ï†ïÏàòÏßÑ', 'sujin.jung@email.com', 'Korea', '2024-11-05'),
            ('ÏµúÏòÅÌò∏', 'youngho.choi@email.com', 'Korea', '2025-01-12'),
            ('ÌïúÏÑúÏó∞', 'seoyeon.han@email.com', 'Korea', '2025-02-18'),
            ('Ïú§ÎåÄÌòÑ', 'daehyun.yoon@email.com', 'Korea', '2025-03-22'),
            ('ÏÜ°ÎØ∏Îùº', 'mira.song@email.com', 'Korea', '2025-04-15'),
            ('John Smith', 'john.smith@email.com', 'USA', '2024-07-10'),
            ('Emma Wilson', 'emma.wilson@email.com', 'UK', '2024-08-05'),
            ('Hiroshi Tanaka', 'hiroshi.tanaka@email.com', 'Japan', '2024-09-15'),
            ('Marie Dubois', 'marie.dubois@email.com', 'France', '2024-10-20')""",
            
            # ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞
            """INSERT INTO products (name, category, price, stock_quantity) VALUES
            ('iPhone 15 Pro', 'Electronics', 1299000.00, 50),
            ('Samsung Galaxy S24', 'Electronics', 1199000.00, 45),
            ('MacBook Air M3', 'Electronics', 1590000.00, 30),
            ('iPad Pro', 'Electronics', 1249000.00, 40),
            ('AirPods Pro', 'Electronics', 329000.00, 100),
            ('Nike Air Max', 'Fashion', 189000.00, 80),
            ('Adidas Ultraboost', 'Fashion', 220000.00, 75),
            ('Zara Wool Coat', 'Fashion', 159000.00, 60),
            ('H&M Cotton T-Shirt', 'Fashion', 29000.00, 200),
            ('IKEA Sofa', 'Home & Garden', 599000.00, 20),
            ('Dyson Vacuum V15', 'Home & Garden', 899000.00, 35),
            ('Nike Basketball', 'Sports', 89000.00, 100),
            ('Wilson Tennis Racket', 'Sports', 279000.00, 45),
            ('Programming Book', 'Books', 45000.00, 200),
            ('Business Guide', 'Books', 38000.00, 180)""",
            
            # Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞ (ÏµúÍ∑º 3Í∞úÏõî)
            """INSERT INTO orders (customer_id, order_date, total_amount, status) VALUES
            (1, '2025-05-15 14:30:00', 1628000.00, 'completed'),
            (3, '2025-05-20 16:45:00', 378000.00, 'completed'),
            (5, '2025-05-25 11:20:00', 899000.00, 'completed'),
            (2, '2025-05-28 09:15:00', 518000.00, 'completed'),
            (4, '2025-06-02 13:25:00', 939000.00, 'completed'),
            (6, '2025-06-08 15:40:00', 668000.00, 'completed'),
            (1, '2025-06-12 10:30:00', 329000.00, 'completed'),
            (7, '2025-06-18 14:15:00', 1048000.00, 'completed'),
            (8, '2025-06-22 16:20:00', 197000.00, 'completed'),
            (3, '2025-06-25 12:45:00', 728000.00, 'completed'),
            (2, '2025-07-01 11:30:00', 789000.00, 'completed'),
            (5, '2025-07-03 14:20:00', 438000.00, 'completed'),
            (4, '2025-07-05 16:15:00', 328000.00, 'completed')""",
            
            # Ï£ºÎ¨∏ ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞
            """INSERT INTO order_items (order_id, product_id, quantity, unit_price) VALUES
            (1, 1, 1, 1299000.00), (1, 5, 1, 329000.00),
            (2, 6, 2, 189000.00),
            (3, 11, 1, 899000.00),
            (4, 9, 1, 29000.00), (4, 14, 1, 45000.00),
            (5, 8, 1, 159000.00), (5, 10, 1, 599000.00),
            (6, 7, 1, 220000.00), (6, 9, 1, 29000.00),
            (7, 5, 1, 329000.00),
            (8, 3, 1, 1590000.00), (8, 12, 1, 89000.00),
            (9, 6, 1, 189000.00),
            (10, 11, 1, 899000.00), (10, 15, 1, 38000.00),
            (11, 2, 1, 1199000.00), (11, 13, 1, 279000.00),
            (12, 8, 1, 159000.00), (12, 14, 6, 45000.00),
            (13, 4, 1, 1249000.00), (13, 9, 1, 29000.00)"""
        ]
        
        console.print("üîß Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï Ï§ë...", style="blue")
        
        # ÌÖåÏù¥Î∏î ÏÉùÏÑ±
        for i, query in enumerate(setup_queries):
            console.print(f"  üìù Ïã§Ìñâ Ï§ë... ({i+1}/{len(setup_queries)})", end="\r")
            result = self.execute_query(query)
            if not result.success:
                console.print(f"\n‚ùå ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ïã§Ìå®: {result.error_message}", style="red")
                return False
            time.sleep(0.1)  # ÏïΩÍ∞ÑÏùò ÎåÄÍ∏∞ ÏãúÍ∞Ñ
        
        console.print("\nüîß ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ Ï§ë...", style="blue")
        
        # ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
        for i, query in enumerate(sample_data_queries):
            console.print(f"  üìä ÏÇΩÏûÖ Ï§ë... ({i+1}/{len(sample_data_queries)})", end="\r")
            result = self.execute_query(query)
            if not result.success:
                console.print(f"\n‚ùå Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ Ïã§Ìå®: {result.error_message}", style="red")
                return False
            time.sleep(0.1)  # ÏïΩÍ∞ÑÏùò ÎåÄÍ∏∞ ÏãúÍ∞Ñ
        
        console.print("\n‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï ÏôÑÎ£å!", style="green")
        return True
    
    def get_schema_info(self) -> Dict[str, Any]:
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà Ï†ïÎ≥¥ Î∞òÌôò"""
        schema_info = {}
        
        try:
            # ÌÖåÏù¥Î∏î Î™©Î°ù Ï°∞Ìöå
            tables_query = "SHOW TABLES"
            result = self.execute_query(tables_query)
            
            if not result.success:
                console.print(f"‚ùå ÌÖåÏù¥Î∏î Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®: {result.error_message}", style="red")
                return schema_info
            
            # Í∞Å ÌÖåÏù¥Î∏îÏùò Ïª¨Îüº Ï†ïÎ≥¥ Ï°∞Ìöå
            for row in result.result_data:
                table_name = list(row.values())[0]
                
                # Í∞Å ÌÖåÏù¥Î∏îÏùò Ïª¨Îüº Ï†ïÎ≥¥ Ï°∞Ìöå
                columns_query = f"DESCRIBE {table_name}"
                columns_result = self.execute_query(columns_query)
                
                if columns_result.success:
                    schema_info[table_name] = {
                        'columns': [col['Field'] for col in columns_result.result_data],
                        'details': columns_result.result_data
                    }
                else:
                    console.print(f"‚ö†Ô∏è ÌÖåÏù¥Î∏î {table_name} Ïä§ÌÇ§Îßà Ï°∞Ìöå Ïã§Ìå®: {columns_result.error_message}", style="yellow")
        
        except Exception as e:
            console.print(f"‚ùå Ïä§ÌÇ§Îßà Ï†ïÎ≥¥ Ï°∞Ìöå Ï§ë Ïò§Î•ò: {str(e)}", style="red")
        
        return schema_info

class CoTSQLGenerator:
    """Chain of Thought Î∞©ÏãùÏùò SQL ÏÉùÏÑ±Í∏∞"""
    
    def __init__(self, openai_api_key: str, base_url: Optional[str] = None, openai_model: str = ""):
        self.client = openai.OpenAI(api_key=openai_api_key, base_url=base_url)
        self.openai_model = openai_model
    
    def generate_sql(self, user_question: str, schema_info: Dict) -> QueryResult:
        """CoT Î∞©ÏãùÏúºÎ°ú SQL ÏøºÎ¶¨ ÏÉùÏÑ±"""
        start_time = time.time()
        
        # Ïä§ÌÇ§Îßà Ï†ïÎ≥¥Î•º Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
        schema_text = self._format_schema_info(schema_info)
        
        prompt = f"""
ÎãπÏã†ÏùÄ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. ÏÇ¨Ïö©ÏûêÏùò ÏûêÏó∞Ïñ¥ ÏßàÎ¨∏ÏùÑ SQL ÏøºÎ¶¨Î°ú Î≥ÄÌôòÌïòÎêò, 
Chain of Thought Î∞©ÏãùÏúºÎ°ú Îã®Í≥ÑÎ≥Ñ Ï∂îÎ°† Í≥ºÏ†ïÏùÑ Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî.

ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏: "{user_question}"

Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà:
{schema_text}

Îã§Ïùå Îã®Í≥ÑÎ•º Îî∞Îùº SQL ÏøºÎ¶¨Î•º ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:

1Îã®Í≥Ñ: ÏßàÎ¨∏ Î∂ÑÏÑù Î∞è ÌïÑÏöî Ï†ïÎ≥¥ ÏãùÎ≥Ñ
- ÏãúÍ∞Ñ Î≤îÏúÑ, ÎåÄÏÉÅ, ÏßëÍ≥Ñ Î∞©Î≤ï, Í∑∏Î£πÌôî Í∏∞Ï§Ä Îì±ÏùÑ Î™ÖÌôïÌûà ÌïòÏÑ∏Ïöî

2Îã®Í≥Ñ: ÌïÑÏöîÌïú ÌÖåÏù¥Î∏î ÏãùÎ≥Ñ
- Í∞Å Ï†ïÎ≥¥Í∞Ä Ïñ¥Îäê ÌÖåÏù¥Î∏îÏóê ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî

3Îã®Í≥Ñ: ÌÖåÏù¥Î∏î Í∞Ñ Ï°∞Ïù∏ Í¥ÄÍ≥Ñ ÏÑ§Í≥Ñ
- Ïñ¥Îñ§ Ïª¨ÎüºÏúºÎ°ú ÌÖåÏù¥Î∏îÎì§ÏùÑ Ïó∞Í≤∞Ìï†ÏßÄ Ï†ïÌïòÏÑ∏Ïöî

4Îã®Í≥Ñ: ÌïÑÌÑ∞ Ï°∞Í±¥ Ï†ïÏùò
- WHERE Ï†àÏóê Îì§Ïñ¥Í∞à Ï°∞Í±¥Îì§ÏùÑ Î™ÖÏãúÌïòÏÑ∏Ïöî

5Îã®Í≥Ñ: ÏßëÍ≥Ñ Ìï®ÏàòÏôÄ Í∑∏Î£πÌôî Ï†ÅÏö©
- SELECT, GROUP BY, ORDER BY Ï†àÏùÑ ÏÑ§Í≥ÑÌïòÏÑ∏Ïöî

6Îã®Í≥Ñ: ÏµúÏ¢Ö SQL ÏøºÎ¶¨ ÏûëÏÑ±
- ÏôÑÏÑ±Îêú ÏøºÎ¶¨Î•º Ï†úÏãúÌïòÏÑ∏Ïöî

ÏùëÎãµ ÌòïÏãù:
1Îã®Í≥Ñ: [Î∂ÑÏÑù ÎÇ¥Ïö©]
2Îã®Í≥Ñ: [ÌÖåÏù¥Î∏î ÏãùÎ≥Ñ]
3Îã®Í≥Ñ: [Ï°∞Ïù∏ ÏÑ§Í≥Ñ]
4Îã®Í≥Ñ: [ÌïÑÌÑ∞ Ï°∞Í±¥]
5Îã®Í≥Ñ: [ÏßëÍ≥Ñ ÏÑ§Í≥Ñ]
6Îã®Í≥Ñ: 
```sql
[ÏµúÏ¢Ö SQL ÏøºÎ¶¨]
```

Ï§ëÏöî: 6Îã®Í≥ÑÏùò SQL ÏøºÎ¶¨Îßå Ïã§Ìñâ Í∞ÄÎä•Ìïú ÌòïÌÉúÎ°ú ÏûëÏÑ±ÌïòÍ≥†, Îã§Î•∏ ÏÑ§Î™ÖÏùÄ Ï£ºÏÑùÏúºÎ°ú Ï≤òÎ¶¨ÌïòÏßÄ ÎßàÏÑ∏Ïöî.
"""
        
        try:
            response = self.client.chat.completions.create(
                model=self.openai_model,
                messages=[{"role": "user", "content": prompt}],
                temperature=0.1
            )
            
            content = response.choices[0].message.content
            
            # Ï∂îÎ°† Îã®Í≥ÑÎì§ Ï∂îÏ∂ú
            reasoning_steps = self._extract_reasoning_steps(content)
            
            # SQL ÏøºÎ¶¨ Ï∂îÏ∂ú
            sql_query = self._extract_sql_query(content)
            
            execution_time = time.time() - start_time
            
            return QueryResult(
                success=True,
                sql_query=sql_query,
                execution_time=execution_time,
                reasoning_steps=reasoning_steps
            )
        
        except Exception as e:
            execution_time = time.time() - start_time
            return QueryResult(
                success=False,
                sql_query="",
                execution_time=execution_time,
                error_message=str(e)
            )
    
    def _format_schema_info(self, schema_info: Dict) -> str:
        """Ïä§ÌÇ§Îßà Ï†ïÎ≥¥Î•º Î¨∏ÏûêÏó¥Î°ú Ìè¨Îß∑ÌåÖ"""
        schema_text = ""
        for table_name, info in schema_info.items():
            schema_text += f"\n{table_name} ÌÖåÏù¥Î∏î:\n"
            for col in info['details']:
                schema_text += f"  - {col['Field']} ({col['Type']})\n"
        return schema_text
    
    def _extract_reasoning_steps(self, content: str) -> List[str]:
        """ÏùëÎãµÏóêÏÑú Ï∂îÎ°† Îã®Í≥ÑÎì§ Ï∂îÏ∂ú"""
        steps = []
        for i in range(1, 7):
            pattern = rf"{i}Îã®Í≥Ñ:(.+?)(?={i+1}Îã®Í≥Ñ:|```sql|$)"
            match = re.search(pattern, content, re.DOTALL)
            if match:
                steps.append(f"{i}Îã®Í≥Ñ: {match.group(1).strip()}")
        return steps
    
    def _extract_sql_query(self, content: str) -> str:
        """ÏùëÎãµÏóêÏÑú SQL ÏøºÎ¶¨ Ï∂îÏ∂ú"""
        sql_pattern = r"```sql\s*(.*?)\s*```"
        match = re.search(sql_pattern, content, re.DOTALL | re.IGNORECASE)
        if match:
            return match.group(1).strip()
        return ""

class ToolSQLGenerator:
    """Tool Ìå®ÌÑ¥ Î∞©ÏãùÏùò SQL ÏÉùÏÑ±Í∏∞"""
    
    def __init__(self, openai_api_key: str, base_url: Optional[str] = None, openai_model: str = ""):
        self.client = openai.OpenAI(api_key=openai_api_key, base_url=base_url)
        self.openai_model = openai_model
    
    def generate_sql(self, user_question: str, schema_info: Dict) -> QueryResult:
        """Tool Ìå®ÌÑ¥ÏúºÎ°ú SQL ÏøºÎ¶¨ ÏÉùÏÑ±"""
        start_time = time.time()
        
        try:
            # Tool 1: ÌÇ§ÏõåÎìú Ï∂îÏ∂ú
            keywords = self._extract_keywords(user_question)
            
            # Tool 2: Í¥ÄÎ†® Ïä§ÌÇ§Îßà Í≤ÄÏÉâ
            relevant_schema = self._get_relevant_schema(keywords, schema_info)
            
            # Tool 3: ÏøºÎ¶¨ ÌÖúÌîåÎ¶ø ÏÉùÏÑ±
            sql_template = self._generate_sql_template(user_question, relevant_schema)
            
            # Tool 4: ÏøºÎ¶¨ ÏµúÏ†ÅÌôî
            optimized_query = self._optimize_query(sql_template)
            
            execution_time = time.time() - start_time
            
            return QueryResult(
                success=True,
                sql_query=optimized_query,
                execution_time=execution_time
            )
        
        except Exception as e:
            execution_time = time.time() - start_time
            return QueryResult(
                success=False,
                sql_query="",
                execution_time=execution_time,
                error_message=str(e)
            )
    
    def _extract_keywords(self, user_question: str) -> List[str]:
        """Tool 1: ÌÇ§ÏõåÎìú Ï∂îÏ∂ú"""
        prompt = f"""
Îã§Ïùå ÏûêÏó∞Ïñ¥ ÏßàÎ¨∏ÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏøºÎ¶¨Ïóê ÌïÑÏöîÌïú ÌïµÏã¨ ÌÇ§ÏõåÎìúÎ•º Ï∂îÏ∂úÌïòÏÑ∏Ïöî.

ÏßàÎ¨∏: "{user_question}"

ÌÇ§ÏõåÎìú Ïú†ÌòïÎ≥ÑÎ°ú Î∂ÑÎ•òÌï¥ÏÑú Ï∂îÏ∂úÌïòÏÑ∏Ïöî:
- ÎåÄÏÉÅ: (Í≥†Í∞ù, Ï£ºÎ¨∏, ÏÉÅÌíà Îì±)
- ÏãúÍ∞Ñ: (ÏµúÍ∑º, 3Í∞úÏõî, ÎÖÑÎèÑ Îì±)
- ÏßÄÏó≠: (ÌïúÍµ≠, ÎØ∏Íµ≠ Îì±)
- ÏßëÍ≥Ñ: (ÌèâÍ∑†, Ìï©Í≥Ñ, Í∞úÏàò Îì±)
- Î∂ÑÎ•ò: (Ïπ¥ÌÖåÍ≥†Î¶¨, ÏÉÅÌÉú Îì±)

JSON ÌòïÏãùÏúºÎ°ú ÏùëÎãµÌïòÏÑ∏Ïöî:
{{"keywords": ["ÌÇ§ÏõåÎìú1", "ÌÇ§ÏõåÎìú2", ...], "categories": ["ÎåÄÏÉÅ", "ÏãúÍ∞Ñ", ...]}}
"""
        
        response = self.client.chat.completions.create(
            model=self.openai_model,
            messages=[{"role": "user", "content": prompt}],
            temperature=0
        )
        
        try:
            result = json.loads(response.choices[0].message.content)
            return result.get("keywords", [])
        except:
            return ["Í≥†Í∞ù", "Ï£ºÎ¨∏", "ÌèâÍ∑†"]  # Í∏∞Î≥∏Í∞í
    
    def _get_relevant_schema(self, keywords: List[str], schema_info: Dict) -> Dict:
        """Tool 2: Í¥ÄÎ†® Ïä§ÌÇ§Îßà Ï†ïÎ≥¥ ÌïÑÌÑ∞ÎßÅ"""
        relevant_tables = {}
        
        # ÌÇ§ÏõåÎìú Í∏∞Î∞òÏúºÎ°ú Í¥ÄÎ†® ÌÖåÏù¥Î∏î ÏÑ†ÌÉù
        keyword_table_mapping = {
            "Í≥†Í∞ù": "customers",
            "Ï£ºÎ¨∏": "orders", 
            "ÏÉÅÌíà": "products",
            "Ïπ¥ÌÖåÍ≥†Î¶¨": "products",
            "ÌïúÍµ≠": "customers",
            "ÌèâÍ∑†": "orders"
        }
        
        for keyword in keywords:
            for k, table in keyword_table_mapping.items():
                if k in keyword and table in schema_info:
                    relevant_tables[table] = schema_info[table]
        
        # order_items ÌÖåÏù¥Î∏îÏùÄ Ï°∞Ïù∏Ïù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ ÏûêÎèô Ìè¨Ìï®
        if "orders" in relevant_tables and "products" in relevant_tables:
            if "order_items" in schema_info:
                relevant_tables["order_items"] = schema_info["order_items"]
        
        return relevant_tables
    
    def _generate_sql_template(self, user_question: str, relevant_schema: Dict) -> str:
        """Tool 3: SQL ÌÖúÌîåÎ¶ø ÏÉùÏÑ±"""
        schema_text = ""
        for table_name, info in relevant_schema.items():
            schema_text += f"{table_name}: {', '.join(info['columns'])}\n"
        
        prompt = f"""
ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏Í≥º Í¥ÄÎ†® Ïä§ÌÇ§Îßà Ï†ïÎ≥¥Î•º Î∞îÌÉïÏúºÎ°ú SQL ÏøºÎ¶¨Î•º ÏÉùÏÑ±ÌïòÏÑ∏Ïöî.

ÏßàÎ¨∏: "{user_question}"

Í¥ÄÎ†® Ïä§ÌÇ§Îßà:
{schema_text}

Í∑úÏπô:
1. ÏôÑÏ†ÑÌïú Ïã§Ìñâ Í∞ÄÎä•Ìïú SQL ÏøºÎ¶¨Îßå Î∞òÌôò
2. Ï£ºÏÑùÏù¥ÎÇò ÏÑ§Î™Ö ÏóÜÏù¥ ÏàúÏàò SQLÎßå
3. Ï†ÅÏ†àÌïú JOIN, WHERE, GROUP BY ÏÇ¨Ïö©
4. Ïª¨ÎüºÎ™ÖÍ≥º ÌÖåÏù¥Î∏îÎ™Ö Ï†ïÌôïÌûà ÏÇ¨Ïö©

SQL ÏøºÎ¶¨:
"""
        
        response = self.client.chat.completions.create(
            model=self.openai_model,
            messages=[{"role": "user", "content": prompt}],
            temperature=0
        )
        
        return response.choices[0].message.content.strip()
    
    def _optimize_query(self, sql_query: str) -> str:
        """Tool 4: ÏøºÎ¶¨ ÏµúÏ†ÅÌôî"""
        # Í∞ÑÎã®Ìïú ÏµúÏ†ÅÌôî Í∑úÏπô Ï†ÅÏö©
        optimized = sql_query
        
        # Î∂àÌïÑÏöîÌïú Ï£ºÏÑù Ï†úÍ±∞
        optimized = re.sub(r'--.*?\n', '', optimized)
        optimized = re.sub(r'/\*.*?\*/', '', optimized, flags=re.DOTALL)
        
        # Ïó¨Îü¨ Í≥µÎ∞±ÏùÑ ÌïòÎÇòÎ°ú
        optimized = re.sub(r'\s+', ' ', optimized)
        
        return optimized.strip()

class PromptTester:
    """ÌîÑÎ°¨ÌîÑÌä∏ ÌÖåÏä§Ìä∏ Î∞è ÎπÑÍµê ÏãúÏä§ÌÖú"""
    
    def __init__(self, db_manager: DatabaseManager, cot_generator: CoTSQLGenerator, 
                 tool_generator: ToolSQLGenerator):
        self.db = db_manager
        self.cot = cot_generator
        self.tool = tool_generator
    
    def run_comparison(self, user_question: str) -> Dict[str, QueryResult]:
        """CoTÏôÄ Tool Ìå®ÌÑ¥ ÎπÑÍµê Ïã§Ìñâ"""
        console.print(f"\nüîç ÏßàÎ¨∏: {user_question}", style="bold blue")
        
        results = {}
        
        try:
            # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
            if not self.db.connection or not self.db.connection.is_connected():
                console.print("‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞Ïù¥ ÎÅäÏñ¥Ï°åÏäµÎãàÎã§. Ïû¨Ïó∞Í≤∞ÏùÑ ÏãúÎèÑÌï©ÎãàÎã§.", style="red")
                if not self.db.connect():
                    console.print("‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïû¨Ïó∞Í≤∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", style="red")
                    return results
            
            schema_info = self.db.get_schema_info()
            
            if not schema_info:
                console.print("‚ùå Ïä§ÌÇ§Îßà Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.", style="red")
                return results
            
            # CoT Î∞©Ïãù Ïã§Ìñâ
            console.print("\nüß† Chain of Thought Î∞©Ïãù Ïã§Ìñâ Ï§ë...", style="yellow")
            try:
                cot_result = self.cot.generate_sql(user_question, schema_info)
                
                if cot_result.success and cot_result.sql_query:
                    db_result = self.db.execute_query(cot_result.sql_query)
                    cot_result.result_data = db_result.result_data
                    if not db_result.success:
                        cot_result.error_message = db_result.error_message
                        cot_result.success = False
                
                results['cot'] = cot_result
            
            except Exception as e:
                console.print(f"‚ùå CoT Î∞©Ïãù Ïã§Ìñâ Ï§ë Ïò§Î•ò: {str(e)}", style="red")
                results['cot'] = QueryResult(
                    success=False,
                    sql_query="",
                    execution_time=0,
                    error_message=str(e)
                )
            
            # Tool Î∞©Ïãù Ïã§Ìñâ
            console.print("\nüîß Tool Ìå®ÌÑ¥ Î∞©Ïãù Ïã§Ìñâ Ï§ë...", style="yellow")
            try:
                tool_result = self.tool.generate_sql(user_question, schema_info)
                
                if tool_result.success and tool_result.sql_query:
                    db_result = self.db.execute_query(tool_result.sql_query)
                    tool_result.result_data = db_result.result_data
                    if not db_result.success:
                        tool_result.error_message = db_result.error_message
                        tool_result.success = False
                
                results['tool'] = tool_result
            
            except Exception as e:
                console.print(f"‚ùå Tool Î∞©Ïãù Ïã§Ìñâ Ï§ë Ïò§Î•ò: {str(e)}", style="red")
                results['tool'] = QueryResult(
                    success=False,
                    sql_query="",
                    execution_time=0,
                    error_message=str(e)
                )
        
        except Exception as e:
            console.print(f"‚ùå ÎπÑÍµê Ïã§Ìñâ Ï§ë Ï†ÑÏ≤¥ Ïò§Î•ò: {str(e)}", style="red")
        
        return results
    
    def display_results(self, results: Dict[str, QueryResult]):
        """Í≤∞Í≥º ÎπÑÍµê ÌëúÏãú"""
        console.print("\n" + "="*80, style="bold")
        console.print("üìä Í≤∞Í≥º ÎπÑÍµê", style="bold green")
        console.print("="*80, style="bold")
        
        # ÎπÑÍµê ÌÖåÏù¥Î∏î
        comparison_table = Table(title="ÏÑ±Îä• ÎπÑÍµê")
        comparison_table.add_column("Ìï≠Î™©", style="cyan")
        comparison_table.add_column("CoT Ìå®ÌÑ¥", style="green")
        comparison_table.add_column("Tool Ìå®ÌÑ¥", style="yellow")
        
        cot_result = results['cot']
        tool_result = results['tool']
        
        comparison_table.add_row(
            "Ïã§Ìñâ ÏÑ±Í≥µ", 
            "‚úÖ" if cot_result.success else "‚ùå",
            "‚úÖ" if tool_result.success else "‚ùå"
        )
        
        comparison_table.add_row(
            "ÏÉùÏÑ± ÏãúÍ∞Ñ",
            f"{cot_result.execution_time:.2f}Ï¥à",
            f"{tool_result.execution_time:.2f}Ï¥à"
        )
        
        if cot_result.success and tool_result.success:
            cot_rows = len(cot_result.result_data) if cot_result.result_data else 0
            tool_rows = len(tool_result.result_data) if tool_result.result_data else 0
            comparison_table.add_row("Í≤∞Í≥º Ìñâ Ïàò", str(cot_rows), str(tool_rows))
        
        console.print(comparison_table)
        
        # CoT Ï∂îÎ°† Í≥ºÏ†ï ÌëúÏãú
        if cot_result.reasoning_steps:
            console.print("\nüß† CoT Ï∂îÎ°† Í≥ºÏ†ï:", style="bold green")
            for step in cot_result.reasoning_steps:
                console.print(f"  {step}")
        
        # SQL ÏøºÎ¶¨ ÌëúÏãú
        console.print("\nüìù ÏÉùÏÑ±Îêú SQL ÏøºÎ¶¨:", style="bold")
        
        if cot_result.sql_query:
            console.print("\nüß† CoT Î∞©Ïãù:")
            syntax = Syntax(cot_result.sql_query, "sql", theme="monokai")
            console.print(syntax)
        
        if tool_result.sql_query:
            console.print("\nüîß Tool Î∞©Ïãù:")
            syntax = Syntax(tool_result.sql_query, "sql", theme="monokai")
            console.print(syntax)
        
        # Ïã§Ìñâ Í≤∞Í≥º ÌëúÏãú
        if cot_result.success and cot_result.result_data:
            console.print("\nüìä CoT Ïã§Ìñâ Í≤∞Í≥º:", style="bold green")
            self._display_query_results(cot_result.result_data)
        
        if tool_result.success and tool_result.result_data:
            console.print("\nüìä Tool Ïã§Ìñâ Í≤∞Í≥º:", style="bold yellow")
            self._display_query_results(tool_result.result_data)
        
        # Ïò§Î•ò Î©îÏãúÏßÄ ÌëúÏãú
        if not cot_result.success and cot_result.error_message:
            console.print(f"\n‚ùå CoT Ïò§Î•ò: {cot_result.error_message}", style="red")
        
        if not tool_result.success and tool_result.error_message:
            console.print(f"\n‚ùå Tool Ïò§Î•ò: {tool_result.error_message}", style="red")
    
    def _display_query_results(self, result_data: List[Dict]):
        """ÏøºÎ¶¨ Í≤∞Í≥ºÎ•º ÌÖåÏù¥Î∏î ÌòïÌÉúÎ°ú ÌëúÏãú"""
        if not result_data:
            console.print("Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.")
            return
        
        # ÏµúÎåÄ 10ÌñâÍπåÏßÄÎßå ÌëúÏãú
        display_data = result_data[:10]
        
        if len(result_data) > 10:
            console.print(f"(Ï¥ù {len(result_data)}Ìñâ Ï§ë 10ÌñâÎßå ÌëúÏãú)")
        
        # ÌÖåÏù¥Î∏î ÏÉùÏÑ±
        table = Table()
        
        # Ïª¨Îüº Ï∂îÍ∞Ä
        if display_data:
            for column in display_data[0].keys():
                table.add_column(str(column), style="cyan")
            
            # Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
            for row in display_data:
                table.add_row(*[str(value) for value in row.values()])
        
        console.print(table)

def main():
    """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
    console.print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                 CoT vs Tool Ìå®ÌÑ¥ Ïã§Ïäµ ÌîÑÎ°úÏ†ùÌä∏                   ‚ïë
‚ïë                  ÌîÑÎ°¨ÌîÑÌä∏ ÏóîÏßÄÎãàÏñ¥ÎßÅ Ïã¨Ìôî                        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """, style="bold blue")
    
    # ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏
    openai_api_key = os.getenv('OPENAI_API_KEY')
    openai_url = os.getenv('OPENAI_URL')
    openai_model = os.getenv('OPENAI_MODEL', 'gpt-4')
    if not openai_api_key:
        console.print("‚ùå OPENAI_API_KEY ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.", style="red")
        console.print("üí° .env ÌååÏùºÏóê OPENAI_API_KEY=your-api-key Î•º Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî.", style="yellow")
        return
    
    mysql_host = os.getenv('MYSQL_HOST', 'localhost')
    mysql_port = int(os.getenv('MYSQL_PORT', 3306))
    mysql_user = os.getenv('MYSQL_USER', 'root')
    mysql_password = os.getenv('MYSQL_PASSWORD')
    
    # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞
    db = DatabaseManager(host=mysql_host, 
                         port=mysql_port, 
                         user=mysql_user, 
                         password=mysql_password)
    if not db.connect():
        console.print("‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", style="red")
        console.print("üí° MySQL ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî.", style="yellow")
        console.print("üí° Docker: docker run --name prompt-mysql -e MYSQL_ROOT_PASSWORD=password123 -e MYSQL_DATABASE=ecommerce_demo -p 3306:3306 -d mysql:8.0", style="cyan")
        return
    
    # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Ïó¨Î∂Ä ÌôïÏù∏
    if Confirm.ask("Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Î•º Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå? (Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎê©ÎãàÎã§)"):
        if not db.setup_database():
            console.print("‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", style="red")
            return
    
    # SQL ÏÉùÏÑ±Í∏∞ Ï¥àÍ∏∞Ìôî
    cot_generator = CoTSQLGenerator(openai_api_key, base_url=openai_url, openai_model=openai_model)
    tool_generator = ToolSQLGenerator(openai_api_key, base_url=openai_url, openai_model=openai_model)
    tester = PromptTester(db, cot_generator, tool_generator)
    
    # ÏòàÏ†ú ÏßàÎ¨∏Îì§
    example_questions = [
        "ÏßÄÎÇú 3Í∞úÏõîÍ∞Ñ ÌïúÍµ≠ Í≥†Í∞ùÎì§Ïùò ÌèâÍ∑† Ï£ºÎ¨∏ Í∏àÏï°ÏùÑ Ïπ¥ÌÖåÍ≥†Î¶¨Î≥ÑÎ°ú Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî",
        "Í∞ÄÏû• ÎßéÏù¥ ÌåîÎ¶∞ ÏÉÅÌíà TOP 5Îäî Î¨¥ÏóáÏù∏Í∞ÄÏöî?",
        "ÏõîÎ≥Ñ Îß§Ï∂ú Ï∂îÏù¥Î•º Î≥¥Ïó¨Ï£ºÏÑ∏Ïöî",
        "Electronics Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÏÑú Í∞ÄÏû• ÎπÑÏãº ÏÉÅÌíàÏùÄ Î¨¥ÏóáÏù∏Í∞ÄÏöî?",
        "ÌïúÍµ≠ Í≥†Í∞ù Ï§ë Í∞ÄÏû• ÎßéÏù¥ Íµ¨Îß§Ìïú Í≥†Í∞ùÏùÄ ÎàÑÍµ¨Ïù∏Í∞ÄÏöî?"
    ]
    
    while True:
        console.print("\n" + "="*60, style="bold")
        console.print("üìù ÏßàÎ¨∏ÏùÑ ÏÑ†ÌÉùÌïòÍ±∞ÎÇò ÏßÅÏ†ë ÏûÖÎ†•ÌïòÏÑ∏Ïöî", style="bold")
        console.print("="*60, style="bold")
        
        # ÏòàÏ†ú ÏßàÎ¨∏ ÌëúÏãú
        console.print("\nüìã ÏòàÏ†ú ÏßàÎ¨∏Îì§:")
        for i, question in enumerate(example_questions, 1):
            console.print(f"  {i}. {question}")
        
        console.print(f"  {len(example_questions) + 1}. ÏßÅÏ†ë ÏûÖÎ†•")
        console.print(f"  {len(example_questions) + 2}. Ï¢ÖÎ£å")
        
        choice = Prompt.ask(
            "\nÏÑ†ÌÉùÌïòÏÑ∏Ïöî", 
            choices=[str(i) for i in range(1, len(example_questions) + 3)]
        )
        
        if choice == str(len(example_questions) + 2):  # Ï¢ÖÎ£å
            break
        elif choice == str(len(example_questions) + 1):  # ÏßÅÏ†ë ÏûÖÎ†•
            user_question = Prompt.ask("ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî")
        else:  # ÏòàÏ†ú ÏßàÎ¨∏ ÏÑ†ÌÉù
            user_question = example_questions[int(choice) - 1]
        
        if user_question.strip():
            # ÎπÑÍµê Ïã§Ìñâ
            results = tester.run_comparison(user_question)
            tester.display_results(results)
            
            # Í≥ÑÏÜç Ïó¨Î∂Ä ÌôïÏù∏
            if not Confirm.ask("\nÎã§Î•∏ ÏßàÎ¨∏ÏùÑ ÌÖåÏä§Ìä∏ÌïòÏãúÍ≤†ÏäµÎãàÍπå?"):
                break
    
    # Ï†ïÎ¶¨
    db.disconnect()
    console.print("\nüëã ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§.", style="green")

if __name__ == "__main__":
    main()